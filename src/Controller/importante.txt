/*Session Cesta*/


/**
     * The request stack.
     *
     * @var RequestStack
     */
    private $requestStack;

    /**
     * The cart repository.
     *
     * @var ReservaRepository
     */
    private $ReservaRepository;

    /**
     * @var string
     */
    const CART_KEY_NAME = 'cart_id';
    

    public function __construct(RequestStack $requestStack,ReservaRepository $ReservaRepository)
    {

        $this->requestStack = $requestStack;
        $this->ReservaRepository = $ReservaRepository;      
    }
    

/**
     * Gets the cart in session.
     *
     * @return Reserva|null
     */
    public function getCart(): ?Reserva
    {
        return $this->ReservaRepository->findOneBy([
            'id' => $this->getCartId(),
            'status' => Reserva::STATUS_CART
        ]);
    }
    /**
     * Sets the cart in session.
     *
     * @param Reserva $cart
     */
    public function setCart(Reserva $cart): void
    {
        $this->getSession()->set(self::CART_KEY_NAME, $cart->getId());
    }

    /**
     * Returns the cart id.
     *
     * @return int|null
     */
    private function getCartId(): ?int
    {
        return $this->getSession()->get(self::CART_KEY_NAME);
    }

    private function getSession(): SessionInterface
    {
        return $this->requestStack->getSession();
    }
   


   /**
     * @var SessionCesta
     */
    private $SessionCesta;

    /**
     * @var ReservaFactory
     */
    private $cartFactory;


     /**
     * @var EntityManagerInterface
     */
    private $entityManager;

    /**
     * CartManager constructor.
     *
     *  @param SessionCesta $cesta
     * @param ReservaFactory $ReservaFactory
     * 
     */
    public function __construct(SessionCesta $cesta,ReservaFactory $ReservaFactory, EntityManagerInterface $entityManager) {
        $this->SessionCesta = $cesta;
        $this->cartFactory = $ReservaFactory;
        $this->entityManager = $entityManager;
    }

    /**
     * Gets the current cart.
     * 
     * @return Reserva
     */
    public function getCurrentCart(): Reserva
    {
        $cart = $this->SessionCesta->getCart();

        if (!$cart) {
            $cart = $this->cartFactory->create();
        }

        return $cart;
    }


    public function save(Reserva $cart): void
    {
        // Persist in database
        $this->entityManager->persist($cart);
        $this->entityManager->flush();
        // Persist in session
        $this->SessionCesta->setCart($cart);
    }
}
